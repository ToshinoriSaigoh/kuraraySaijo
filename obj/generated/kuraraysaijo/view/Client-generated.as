

/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    kuraraysaijo.view
 *  Class:      Client
 *  Source:     F:\git\KuraraySaijo\src\kuraraysaijo\view\Client.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2023.02.23 11:36:05 JST
 */

package kuraraysaijo.view
{

import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import kuraraysaijo.view.documentroot.AlertScreen;
import kuraraysaijo.view.documentroot.InitScreen;
import kuraraysaijo.view.documentroot.ReportScreen;
import mx.binding.*;
import mx.containers.ViewStack;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.mx_internal;
import mx.filters.*;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.Group;
import spark.core.SpriteVisualElement;
import spark.layouts.BasicLayout;
import view.DocumentRoot;


[States("normal", "alert")]
[Frame(extraClass="_Client_FlexInit")]

[Frame(factoryClass="_Client_mx_managers_SystemManager")]


//  begin class def
public class Client
    extends view.DocumentRoot
    implements mx.core.IStateClient2
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var AlertScreen : kuraraysaijo.view.documentroot.AlertScreen;

    [Bindable]
	/**
 * @private
 **/
    public var body : spark.core.SpriteVisualElement;

    [Bindable]
	/**
 * @private
 **/
    public var initScreen : kuraraysaijo.view.documentroot.InitScreen;

    [Bindable]
	/**
 * @private
 **/
    public var reportScreen : kuraraysaijo.view.documentroot.ReportScreen;

    [Bindable]
	/**
 * @private
 **/
    public var rootViewStack : mx.containers.ViewStack;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function Client()
    {
        super();

        mx_internal::_document = this;




        // layer initializers

       
        // properties
        this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_Client_Array2_c);
        this.currentState = "normal";


        // events



		states = [
		  new State ({
		    name: "normal",
		    overrides: [
		    ]
		  })
		  ,
		  new State ({
		    name: "alert",
		    overrides: [
		      new mx.states.SetProperty().initializeFromObject({
		        target: "AlertScreen",
		        name: "visible",
		        value: true
		      })
		    ]
		  })
		];









    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings


        // ambient styles
        mx_internal::_Client_StylesInit();

                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 8 - 10

			public var appType: String = "client";
		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _Client_Array2_c() : Array
{
	var temp : Array = [_Client_SpriteVisualElement1_i(), _Client_Group1_c(), _Client_AlertScreen1_i()];
	return temp;
}

private function _Client_SpriteVisualElement1_i() : spark.core.SpriteVisualElement
{
	var temp : spark.core.SpriteVisualElement = new spark.core.SpriteVisualElement();
	temp.initialized(this, "body")
	body = temp;
	mx.binding.BindingManager.executeBindings(this, "body", body);
	return temp;
}

private function _Client_Group1_c() : spark.components.Group
{
	var temp : spark.components.Group = new spark.components.Group();
	temp.left = 0;
	temp.top = 0;
	temp.right = 0;
	temp.bottom = 0;
	temp.percentWidth = 100.0;
	temp.percentHeight = 100.0;
	temp.layout = _Client_BasicLayout1_c();
	temp.mxmlContent = [_Client_ViewStack1_i()];
	if (!temp.document) temp.document = this;
	return temp;
}

private function _Client_BasicLayout1_c() : spark.layouts.BasicLayout
{
	var temp : spark.layouts.BasicLayout = new spark.layouts.BasicLayout();
	return temp;
}

private function _Client_ViewStack1_i() : mx.containers.ViewStack
{
	var temp : mx.containers.ViewStack = new mx.containers.ViewStack();
	temp.top = 0;
	temp.percentWidth = 100.0;
	temp.percentHeight = 100.0;
	temp.creationPolicy = "all";
	temp.id = "rootViewStack";
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.ViewStack
		  ,
		  id: "rootViewStack"
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: kuraraysaijo.view.documentroot.InitScreen
		        ,
		        id: "initScreen"
		        ,
		        propertiesFactory: function():Object { return {
		          name: "initScreen",
		          percentWidth: 100.0,
		          percentHeight: 100.0
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: kuraraysaijo.view.documentroot.ReportScreen
		        ,
		        id: "reportScreen"
		        ,
		        propertiesFactory: function():Object { return {
		          name: "reportScreen",
		          percentWidth: 100.0,
		          percentHeight: 100.0
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	rootViewStack = temp;
	mx.binding.BindingManager.executeBindings(this, "rootViewStack", rootViewStack);
	return temp;
}

private function _Client_AlertScreen1_i() : kuraraysaijo.view.documentroot.AlertScreen
{
	var temp : kuraraysaijo.view.documentroot.AlertScreen = new kuraraysaijo.view.documentroot.AlertScreen();
	temp.visible = false;
	temp.id = "AlertScreen";
	if (!temp.document) temp.document = this;
	AlertScreen = temp;
	mx.binding.BindingManager.executeBindings(this, "AlertScreen", AlertScreen);
	return temp;
}



    //  initialize style defs for Client

    mx_internal var _Client_StylesInit_done:Boolean = false;

    mx_internal function _Client_StylesInit():void
    {
        //  only add our style defs to the style manager once
        if (mx_internal::_Client_StylesInit_done)
            return;
        else
            mx_internal::_Client_StylesInit_done = true;
            
        var style:CSSStyleDeclaration;
        var effects:Array;
                    

        var conditions:Array;
        var condition:CSSCondition;
        var selector:CSSSelector;
        selector = null;
        conditions = null;
        conditions = null;
        selector = new CSSSelector("global", conditions, selector);
        // global
        style = styleManager.getStyleDeclaration("global");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("id", "initScreen");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // #initScreen
        style = styleManager.getStyleDeclaration("#initScreen");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.backgroundColor = 0x222222;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("id", "reportScreen");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // #reportScreen
        style = styleManager.getStyleDeclaration("#reportScreen");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.backgroundColor = 0xffffff;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "textSmall");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .textSmall
        style = styleManager.getStyleDeclaration(".textSmall");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xaaaaaa;
                this.fontSize = 36;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "textMedium");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .textMedium
        style = styleManager.getStyleDeclaration(".textMedium");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.fontSize = 48;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "textLarge");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .textLarge
        style = styleManager.getStyleDeclaration(".textLarge");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.fontSize = 64;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "textXLarge");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .textXLarge
        style = styleManager.getStyleDeclaration(".textXLarge");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.fontSize = 96;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "folderListItem");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .folderListItem
        style = styleManager.getStyleDeclaration(".folderListItem");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0x222222;
                this.fontSize = 48;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "itemLabel");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .itemLabel
        style = styleManager.getStyleDeclaration(".itemLabel");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xffffff;
                this.fontSize = 40;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "btnText");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .btnText
        style = styleManager.getStyleDeclaration(".btnText");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xffffff;
                this.fontSize = 40;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "WBGTlv0");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .WBGTlv0
        style = styleManager.getStyleDeclaration(".WBGTlv0");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0x000000;
                this.fontSize = 64;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "WBGTlv1");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .WBGTlv1
        style = styleManager.getStyleDeclaration(".WBGTlv1");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xffffff;
                this.fontSize = 64;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "WBGTlv2");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .WBGTlv2
        style = styleManager.getStyleDeclaration(".WBGTlv2");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0x000000;
                this.fontSize = 64;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "WBGTlv3");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .WBGTlv3
        style = styleManager.getStyleDeclaration(".WBGTlv3");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0x000000;
                this.fontSize = 64;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "WBGTlv4");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .WBGTlv4
        style = styleManager.getStyleDeclaration(".WBGTlv4");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xffffff;
                this.fontSize = 64;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "anemometerlv0");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .anemometerlv0
        style = styleManager.getStyleDeclaration(".anemometerlv0");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0x000000;
                this.fontSize = 64;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "anemometerlv1");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .anemometerlv1
        style = styleManager.getStyleDeclaration(".anemometerlv1");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xffffff;
                this.fontSize = 64;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "anemometerlv2");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .anemometerlv2
        style = styleManager.getStyleDeclaration(".anemometerlv2");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0x000000;
                this.fontSize = 52;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "anemometerlv3");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .anemometerlv3
        style = styleManager.getStyleDeclaration(".anemometerlv3");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0x000000;
                this.fontSize = 52;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "anemometerlv4");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .anemometerlv4
        style = styleManager.getStyleDeclaration(".anemometerlv4");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xee0000;
                this.fontSize = 52;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "anemometerlv5");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .anemometerlv5
        style = styleManager.getStyleDeclaration(".anemometerlv5");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xffffff;
                this.fontSize = 64;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "anemometerlv6");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .anemometerlv6
        style = styleManager.getStyleDeclaration(".anemometerlv6");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xeeee00;
                this.fontSize = 52;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "emergencyPageBtn");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .emergencyPageBtn
        style = styleManager.getStyleDeclaration(".emergencyPageBtn");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xffffff;
                this.fontSize = 52;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "troublePageBtn");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .troublePageBtn
        style = styleManager.getStyleDeclaration(".troublePageBtn");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0x222222;
                this.fontSize = 52;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "manualPageBtn");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .manualPageBtn
        style = styleManager.getStyleDeclaration(".manualPageBtn");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xffffff;
                this.fontSize = 52;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "emergencyTitle");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .emergencyTitle
        style = styleManager.getStyleDeclaration(".emergencyTitle");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xee0000;
                this.fontSize = 96;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "troubleTitle");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .troubleTitle
        style = styleManager.getStyleDeclaration(".troubleTitle");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xeeaa00;
                this.fontSize = 96;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("id", "emergencyHeadMenu");
        conditions.push(condition); 
        selector = new CSSSelector("*", conditions, selector);
        conditions = [];
        condition = new CSSCondition("id", "datetime");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // *#emergencyHeadMenu #datetime
        style = styleManager.getStyleDeclaration("*#emergencyHeadMenu #datetime");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0x222222;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("id", "emergencyHeader");
        conditions.push(condition); 
        selector = new CSSSelector("*", conditions, selector);
        conditions = [];
        condition = new CSSCondition("id", "datetimeHead");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // *#emergencyHeader #datetimeHead
        style = styleManager.getStyleDeclaration("*#emergencyHeader #datetimeHead");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0x222222;
            };
        }




        selector = null;
        conditions = null;
        conditions = null;
        selector = new CSSSelector("spark.components.Label", conditions, selector);
        // spark.components.Label
        style = styleManager.getStyleDeclaration("spark.components.Label");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.fontFamily = "Noto Sans Mono CJK JP Regular CFF";
                this.color = 0xffffff;
                this.fontSize = 40;
                this.fontWeight = "normal";
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "record");
        conditions.push(condition); 
        selector = new CSSSelector("spark.components.Label", conditions, selector);
        // spark.components.Label.record
        style = styleManager.getStyleDeclaration("spark.components.Label.record");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.verticalAlign = "middle";
                this.paddingBottom = 10;
                this.color = 0xffffff;
                this.textAlign = "right";
                this.paddingRight = 30;
                this.fontSize = 180;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "person");
        conditions.push(condition); 
        selector = new CSSSelector("spark.components.Label", conditions, selector);
        // spark.components.Label.person
        style = styleManager.getStyleDeclaration("spark.components.Label.person");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.verticalAlign = "middle";
                this.fontFamily = "Noto Sans Mono CJK JP Regular CFF";
                this.color = 0x111111;
                this.fontSize = 60;
                this.paddingLeft = 20;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "personList");
        conditions.push(condition); 
        selector = new CSSSelector("spark.components.Label", conditions, selector);
        // spark.components.Label.personList
        style = styleManager.getStyleDeclaration("spark.components.Label.personList");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.fontFamily = "Noto Sans Mono CJK JP Regular CFF";
                this.paddingBottom = 20;
                this.color = 0x111111;
                this.paddingRight = 20;
                this.fontSize = 60;
                this.paddingTop = 20;
                this.paddingLeft = 20;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "meter");
        conditions.push(condition); 
        selector = new CSSSelector("spark.components.Label", conditions, selector);
        // spark.components.Label.meter
        style = styleManager.getStyleDeclaration("spark.components.Label.meter");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.verticalAlign = "middle";
                this.color = 0x111111;
                this.textAlign = "right";
                this.paddingRight = 20;
                this.fontSize = 108;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "alertMeter");
        conditions.push(condition); 
        selector = new CSSSelector("spark.components.Label", conditions, selector);
        // spark.components.Label.alertMeter
        style = styleManager.getStyleDeclaration("spark.components.Label.alertMeter");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.verticalAlign = "middle";
                this.textAlign = "right";
                this.paddingRight = 20;
                this.fontSize = 108;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "head");
        conditions.push(condition); 
        selector = new CSSSelector("spark.components.Label", conditions, selector);
        // spark.components.Label.head
        style = styleManager.getStyleDeclaration("spark.components.Label.head");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.verticalAlign = "middle";
                this.fontFamily = "Noto Sans Mono CJK JP Bold CFF";
                this.color = 0x111111;
                this.fontSize = 62;
                this.fontWeight = "normal";
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "textarea");
        conditions.push(condition); 
        selector = new CSSSelector("spark.components.Label", conditions, selector);
        // spark.components.Label.textarea
        style = styleManager.getStyleDeclaration("spark.components.Label.textarea");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.fontFamily = "Noto Sans Mono CJK JP Regular CFF";
                this.paddingBottom = 20;
                this.color = 0x111111;
                this.paddingRight = 20;
                this.fontSize = 64;
                this.paddingTop = 20;
                this.paddingLeft = 20;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "day");
        conditions.push(condition); 
        selector = new CSSSelector("spark.components.Label", conditions, selector);
        // spark.components.Label.day
        style = styleManager.getStyleDeclaration("spark.components.Label.day");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.verticalAlign = "middle";
                this.fontFamily = "Noto Sans Mono CJK JP Regular CFF";
                this.color = 0x111111;
                this.fontSize = 96;
                this.fontWeight = "normal";
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "time");
        conditions.push(condition); 
        selector = new CSSSelector("spark.components.Label", conditions, selector);
        // spark.components.Label.time
        style = styleManager.getStyleDeclaration("spark.components.Label.time");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.verticalAlign = "middle";
                this.fontFamily = "Noto Sans Mono CJK JP Regular CFF";
                this.color = 0x111111;
                this.fontSize = 180;
                this.fontWeight = "normal";
            };
        }




        selector = null;
        conditions = null;
        conditions = null;
        selector = new CSSSelector("spark.components.TextArea", conditions, selector);
        // spark.components.TextArea
        style = styleManager.getStyleDeclaration("spark.components.TextArea");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.backgroundColor = 0x222222;
                this.fontFamily = "Noto Sans Mono CJK JP Regular CFF";
                this.color = 0xffffff;
                this.fontSize = 48;
                this.fontWeight = "normal";
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("id", "monitorContainer");
        conditions.push(condition); 
        selector = new CSSSelector("*", conditions, selector);
        conditions = null;
        selector = new CSSSelector("spark.components.TextArea", conditions, selector);
        // *#monitorContainer spark.components.TextArea
        style = styleManager.getStyleDeclaration("*#monitorContainer spark.components.TextArea");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.paddingBottom = 20;
                this.color = 0x111111;
                this.paddingRight = 20;
                this.fontSize = 64;
                this.paddingTop = 20;
                this.paddingLeft = 20;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("id", "monitorContainer");
        conditions.push(condition); 
        selector = new CSSSelector("*", conditions, selector);
        conditions = [];
        condition = new CSSCondition("class", "personList");
        conditions.push(condition); 
        selector = new CSSSelector("spark.components.TextArea", conditions, selector);
        // *#monitorContainer spark.components.TextArea.personList
        style = styleManager.getStyleDeclaration("*#monitorContainer spark.components.TextArea.personList");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.paddingBottom = 20;
                this.color = 0x111111;
                this.paddingRight = 20;
                this.fontSize = 64;
                this.paddingTop = 20;
                this.paddingLeft = 20;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("id", "settingsKuraraySaijoContainer");
        conditions.push(condition); 
        selector = new CSSSelector("*", conditions, selector);
        conditions = null;
        selector = new CSSSelector("spark.components.TextArea", conditions, selector);
        // *#settingsKuraraySaijoContainer spark.components.TextArea
        style = styleManager.getStyleDeclaration("*#settingsKuraraySaijoContainer spark.components.TextArea");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0x111111;
                this.fontSize = 44;
            };
        }




        selector = null;
        conditions = null;
        conditions = null;
        selector = new CSSSelector("spark.components.Button", conditions, selector);
        // spark.components.Button
        style = styleManager.getStyleDeclaration("spark.components.Button");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.color = 0xffffff;
                this.fontSize = 40;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("pseudo", "over");
        conditions.push(condition); 
        selector = new CSSSelector("spark.components.Button", conditions, selector);
        // spark.components.Button:over
        style = styleManager.getStyleDeclaration("spark.components.Button:over");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.backgroundColor = 0xeeee00;
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("id", "settingsKuraraySaijoContainer");
        conditions.push(condition); 
        selector = new CSSSelector("*", conditions, selector);
        conditions = null;
        selector = new CSSSelector("spark.components.Button", conditions, selector);
        // *#settingsKuraraySaijoContainer spark.components.Button
        style = styleManager.getStyleDeclaration("*#settingsKuraraySaijoContainer spark.components.Button");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.fontFamily = "Noto Sans Mono CJK JP Regular CFF";
                this.color = 0xff0000;
                this.fontSize = 40;
                this.fontWeight = "normal";
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("id", "monitorContainer");
        conditions.push(condition); 
        selector = new CSSSelector("*", conditions, selector);
        conditions = null;
        selector = new CSSSelector("spark.components.TextInput", conditions, selector);
        // *#monitorContainer spark.components.TextInput
        style = styleManager.getStyleDeclaration("*#monitorContainer spark.components.TextInput");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.fontFamily = "Noto Sans Mono CJK JP Regular CFF";
                this.color = 0x111111;
                this.fontSize = 64;
            };
        }





        styleManager.initProtoChainRoots();
    }


    //  embed carrier vars
[Embed(_file='F:/git/KuraraySaijo/src/kuraraysaijo/view/style.css', fontName='Noto Sans Mono CJK JP Bold', original='../../../assets/fonts/NotoSansMonoCJKjp-Bold.otf', _resolvedSource='F:/git/KuraraySaijo/assets/fonts/NotoSansMonoCJKjp-Bold.otf', _pathsep='true', mimeType='application/x-font', source='F:/git/KuraraySaijo/assets/fonts/NotoSansMonoCJKjp-Bold.otf', embedAsCFF='false', _line='34')]
 private var _embed__font_Noto_Sans_Mono_CJK_JP_Bold_medium_normal_129724445:Class;

[Embed(_file='F:/git/KuraraySaijo/src/kuraraysaijo/view/style.css', fontName='Noto Sans Mono CJK JP Regular CFF', original='../../../assets/fonts/NotoSansMonoCJKjp-Regular.otf', _resolvedSource='F:/git/KuraraySaijo/assets/fonts/NotoSansMonoCJKjp-Regular.otf', _pathsep='true', mimeType='application/x-font', source='F:/git/KuraraySaijo/assets/fonts/NotoSansMonoCJKjp-Regular.otf', embedAsCFF='true', _line='16')]
 private var _embed__font_Noto_Sans_Mono_CJK_JP_Regular_CFF_medium_normal_1602321943:Class;

[Embed(_file='F:/git/KuraraySaijo/src/kuraraysaijo/view/style.css', fontName='Noto Sans Mono CJK JP Bold CFF', original='../../../assets/fonts/NotoSansMonoCJKjp-Bold.otf', _resolvedSource='F:/git/KuraraySaijo/assets/fonts/NotoSansMonoCJKjp-Bold.otf', _pathsep='true', mimeType='application/x-font', source='F:/git/KuraraySaijo/assets/fonts/NotoSansMonoCJKjp-Bold.otf', embedAsCFF='true', _line='28')]
 private var _embed__font_Noto_Sans_Mono_CJK_JP_Bold_CFF_medium_normal_1723661492:Class;

[Embed(_file='F:/git/KuraraySaijo/src/kuraraysaijo/view/style.css', fontName='Noto Sans Mono CJK JP Regular', original='../../../assets/fonts/NotoSansMonoCJKjp-Regular.otf', _resolvedSource='F:/git/KuraraySaijo/assets/fonts/NotoSansMonoCJKjp-Regular.otf', _pathsep='true', mimeType='application/x-font', source='F:/git/KuraraySaijo/assets/fonts/NotoSansMonoCJKjp-Regular.otf', embedAsCFF='false', _line='22')]
 private var _embed__font_Noto_Sans_Mono_CJK_JP_Regular_medium_normal_287340594:Class;

    //  end embed carrier vars


//  end class def
}

//  end package def
}
