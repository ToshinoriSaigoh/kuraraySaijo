

/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    view.utils.dropdownlist
 *  Class:      ListItem
 *  Source:     F:\git\KuraraySaijo\src\view\utils\dropdownlist\ListItem.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2023.02.23 11:36:22 JST
 */

package view.utils.dropdownlist
{

import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.graphics.SolidColor;
import mx.graphics.SolidColorStroke;
import mx.states.AddItems;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.Label;
import spark.components.supportClasses.ItemRenderer;
import spark.primitives.Rect;


[States("normal", "hovered", "selected")]

//  begin class def
public class ListItem
    extends spark.components.supportClasses.ItemRenderer
    implements mx.core.IStateClient2
{

    //  instance variables
    [Inspectable]
/**
 * @private
 **/
    public var _ListItem_Rect1 : spark.primitives.Rect;

    [Inspectable]
    [Bindable]
/**
 * @private
 **/
    public var _ListItem_SolidColorStroke1 : mx.graphics.SolidColorStroke;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function ListItem()
    {
        super();

        mx_internal::_document = this;




        // layer initializers

       
        // properties
        this.autoDrawBackground = false;
        this.width = 124;
        this.height = 32;
        this.mxmlContent = [_ListItem_Rect2_c(), _ListItem_Label1_i()];
        this.currentState = "normal";


        // events
        this.addEventListener("creationComplete", ___ListItem_ItemRenderer1_creationComplete);

		var _ListItem_Rect1_factory:DeferredInstanceFromFunction = 
		  new mx.core.DeferredInstanceFromFunction(_ListItem_Rect1_i);


		states = [
		  new State ({
		    name: "normal",
		    overrides: [
		    ]
		  })
		  ,
		  new State ({
		    name: "hovered",
		    overrides: [
		      new AddItems().initializeFromObject({
		        itemsFactory: _ListItem_Rect1_factory,
		        destination: null,
		        propertyName: "mxmlContent",
		        position: "first"
		      })
		      ,
		      new mx.states.SetProperty().initializeFromObject({
		        target: "_ListItem_SolidColorStroke1",
		        name: "color",
		        value: 16777215
		      })
		    ]
		  })
		  ,
		  new State ({
		    name: "selected",
		    overrides: [
		      new AddItems().initializeFromObject({
		        itemsFactory: _ListItem_Rect1_factory,
		        destination: null,
		        propertyName: "mxmlContent",
		        position: "first"
		      })
		      ,
		      new mx.states.SetProperty().initializeFromObject({
		        target: "_ListItem_SolidColorStroke1",
		        name: "color",
		        value: 48110
		      })
		    ]
		  })
		];









    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 11 - 16

			private function _init(): void
			{
				this.labelDisplay.text = document.data.text;
			}
		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _ListItem_Rect1_i() : spark.primitives.Rect
{
	var temp : spark.primitives.Rect = new spark.primitives.Rect();
	temp.left = 0;
	temp.right = 0;
	temp.top = 0;
	temp.bottom = 0;
	temp.fill = _ListItem_SolidColor1_c();
	temp.initialized(this, "_ListItem_Rect1")
	_ListItem_Rect1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_ListItem_Rect1", _ListItem_Rect1);
	return temp;
}

private function _ListItem_SolidColor1_c() : mx.graphics.SolidColor
{
	var temp : mx.graphics.SolidColor = new mx.graphics.SolidColor();
	temp.color = 2236962;
	return temp;
}

private function _ListItem_Rect2_c() : spark.primitives.Rect
{
	var temp : spark.primitives.Rect = new spark.primitives.Rect();
	temp.left = 1;
	temp.right = 1;
	temp.top = 1;
	temp.bottom = 1;
	temp.stroke = _ListItem_SolidColorStroke1_i();
	temp.initialized(this, null)
	return temp;
}

private function _ListItem_SolidColorStroke1_i() : mx.graphics.SolidColorStroke
{
	var temp : mx.graphics.SolidColorStroke = new mx.graphics.SolidColorStroke();
	temp.color = 2236962;
	temp.weight = 1;
	_ListItem_SolidColorStroke1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_ListItem_SolidColorStroke1", _ListItem_SolidColorStroke1);
	return temp;
}

private function _ListItem_Label1_i() : spark.components.Label
{
	var temp : spark.components.Label = new spark.components.Label();
	temp.percentHeight = 100.0;
	temp.setStyle("paddingLeft", 10);
	temp.setStyle("verticalAlign", "middle");
	temp.setStyle("fontWeight", "normal");
	temp.setStyle("fontStyle", "normal");
	temp.id = "labelDisplay";
	if (!temp.document) temp.document = this;
	labelDisplay = temp;
	mx.binding.BindingManager.executeBindings(this, "labelDisplay", labelDisplay);
	return temp;
}

/**
 * @private
 **/
public function ___ListItem_ItemRenderer1_creationComplete(event:mx.events.FlexEvent):void
{
	_init()
}





    //  embed carrier vars
    //  end embed carrier vars


//  end class def
}

//  end package def
}
